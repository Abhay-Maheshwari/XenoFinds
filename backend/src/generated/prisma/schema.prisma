// Shopify Data Ingestion & Insights Service - Prisma Schema
// Multi-tenant database schema for Shopify integration

generator client {
  provider = "prisma-client-js"
  output   = "../backend/src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tenant model - represents a business/organization using the service
model Tenant {
  id               String    @id @default(uuid())
  name             String
  email            String    @unique
  password         String
  shopifyApiKey    String?
  shopifyApiSecret String?
  shopifyStoreUrl  String?
  accessToken      String?
  isActive         Boolean   @default(true)
  lastSyncedAt     DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  customers    Customer[]
  orders       Order[]
  products     Product[]
  customEvents CustomEvent[]

  @@map("tenants")
}

// Customer model - represents Shopify customers
model Customer {
  id                String   @id @default(uuid())
  shopifyCustomerId String   @unique
  firstName         String?
  lastName          String?
  email             String?
  phone             String?
  acceptsMarketing  Boolean  @default(false)
  totalSpent        Decimal  @default(0) @db.Decimal(10, 2)
  ordersCount       Int      @default(0)
  state             String?
  tags              String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Foreign key
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  orders       Order[]
  customEvents CustomEvent[]

  @@map("customers")
}

// Order model - represents Shopify orders
model Order {
  id                String    @id @default(uuid())
  shopifyOrderId    String    @unique
  orderNumber       String?
  totalPrice        Decimal   @db.Decimal(10, 2)
  subtotalPrice     Decimal?  @db.Decimal(10, 2)
  totalTax          Decimal?  @db.Decimal(10, 2)
  currency          String    @default("USD")
  financialStatus   String?
  fulfillmentStatus String?
  processedAt       DateTime?
  cancelledAt       DateTime?
  tags              String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Foreign keys
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  @@map("orders")
}

// Product model - represents Shopify products
model Product {
  id               String   @id @default(uuid())
  shopifyProductId String   @unique
  title            String
  handle           String?
  vendor           String?
  productType      String?
  status           String   @default("active")
  totalInventory   Int      @default(0)
  tags             String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Foreign key
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("products")
}

// CustomEvent model - represents custom events (cart abandoned, checkout started, etc.)
model CustomEvent {
  id        String   @id @default(uuid())
  eventType String // 'cart_abandoned', 'checkout_started', 'page_viewed', etc.
  eventData Json? // Store additional event data as JSON
  sessionId String?
  ipAddress String?
  userAgent String?
  referrer  String?
  createdAt DateTime @default(now())

  // Foreign keys
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  @@map("custom_events")
}
