generator client {
  provider = "prisma-client-js"
  output   = "../backend/src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id               String        @id @default(uuid())
  name             String
  email            String        @unique
  password         String
  shopifyApiKey    String?
  shopifyApiSecret String?
  shopifyStoreUrl  String?
  accessToken      String?
  isActive         Boolean       @default(true)
  lastSyncedAt     DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  customEvents     CustomEvent[]
  customers        Customer[]
  orders           Order[]
  products         Product[]

  @@map("tenants")
}

model Customer {
  id                String        @id @default(uuid())
  shopifyCustomerId String        @unique
  firstName         String?
  lastName          String?
  email             String?
  phone             String?
  acceptsMarketing  Boolean       @default(false)
  totalSpent        Decimal       @default(0) @db.Decimal(10, 2)
  ordersCount       Int           @default(0)
  state             String?
  tags              String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  tenantId          String
  customEvents      CustomEvent[]
  tenant            Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  orders            Order[]

  @@map("customers")
}

model Order {
  id                String    @id @default(uuid())
  shopifyOrderId    String    @unique
  orderNumber       String?
  totalPrice        Decimal   @db.Decimal(10, 2)
  subtotalPrice     Decimal?  @db.Decimal(10, 2)
  totalTax          Decimal?  @db.Decimal(10, 2)
  currency          String    @default("USD")
  financialStatus   String?
  fulfillmentStatus String?
  processedAt       DateTime?
  cancelledAt       DateTime?
  tags              String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  tenantId          String
  customerId        String?
  customer          Customer? @relation(fields: [customerId], references: [id])
  tenant            Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model Product {
  id               String   @id @default(uuid())
  shopifyProductId String   @unique
  title            String
  handle           String?
  vendor           String?
  productType      String?
  status           String   @default("active")
  totalInventory   Int      @default(0)
  tags             String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  tenantId         String
  tenant           Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("products")
}

model CustomEvent {
  id         String    @id @default(uuid())
  eventType  String
  eventData  Json?
  sessionId  String?
  ipAddress  String?
  userAgent  String?
  referrer   String?
  createdAt  DateTime  @default(now())
  tenantId   String
  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])
  tenant     Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("custom_events")
}
